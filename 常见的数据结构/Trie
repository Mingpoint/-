trie树中，字符串in，inn和int的公共前缀是“in”，因此可以只存储一份“in”以节省空间。
当然，如果系统中存在大量字符串且这些字符串基本没有公共前缀，则相应的trie树将非常消耗内存，这也是trie树的一个缺点。
Trie树的基本性质可以归纳为：
（1）根节点不包含字符，除根节点意外每个节点只包含一个字符。
（2）从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。
（3）每个节点的所有子节点包含的字符串不相同。

2、 Trie树的基本实现
字母树的插入（Insert）、删除（ Delete）和查找（Find）都非常简单，用一个一重循环即可，
即第i 次循环找到前i 个字母所对应的子树，然后进行相应的操作。
实现这棵字母树，我们用最常见的数组保存（静态开辟内存）即可，当然也可以开动态的指针类型（动态开辟内存）。
至于结点对儿子的指向，一般有三种方法：
1、对每个结点开一个字母集大小的数组，对应的下标是儿子所表示的字母，内容则是这个儿子对应在大数组上的位置，即标号；
2、对每个结点挂一个链表，按一定顺序记录每个儿子是谁；
3、使用左儿子右兄弟表示法记录这棵树。
三种方法，各有特点。
第一种易实现，但实际的空间要求较大；
第二种，较易实现，空间要求相对较小，但比较费时；
第三种，空间要求最小，但相对费时且不易写。